Spring Boot Overview
framework for building java applications
Spring Boot perfomrs auto-configuration on props files and JAR classpath
Help to resolve dependecy conflicts
Provides embedded HTTP server

Spring Boot and Spring relation
Spring Boot uses Spring behiond the scenes, makes it easier to use Spring


Spring Initilizer http://start.spring.io
Qucikly create a starter Spring Boot Project
Select your dependencies
Creates a Maven/Gradle project
Import project into my IDE

No neeed to install server separetly

Running Spring Boot Apps
Spring Boot apps can be run standalone
Run from IDE or command-line


Deploying Spring Boot Apps
Spring Boot apps can also be deplotes in traditional way (Deploy WAR file to external server) 


Maven 
downloads jar files, don't need to do it manually


Develeopment od Spring file in spring initializr
1. Configure our project at Spring Initializr website 
-choose project, language, spring boot version, project metadata and dependencies
2. Download zip
3. Unzip file
4. Import project into IDE
Then we cun run it and it runs on local server localhost:8080

spring.io - main spring website 

Goals of Spring 
lightweight debelopment with POJOs
dependency injection
minimize amount of code 




Core Container
Beans, Core, SpEL, Context - factory for creating beans 
Beans, dependency injection, inversion control: https://www.baeldung.com/spring-bean

Infrastracture 
AOP: Aspect oriented programming 
Add functionality to objects declaratively - logginm security transactions 

Data Acces Layer 
Communicating with databases, it contains JDBC for example , ORM - object relational Mapping Intergration with Hibernate and JPA
JMS Java message service, Transactions support 

Web Layer
All web related classes  

Test Layer (Unit, Integration, Mock) 
Supports test driven development 





What are Spring Projects? 
additionals modules built on top of the core framework for example: Spring Cloud, Spring Security 



What is Maven? 
project managment tool
we can tell which dependencies we need and it auto downloads it for us 

Maven project structure 
src/main/java - place for source code
src/main/resources - properties/config files used by your app 
src/main/webapp - JSP files and web config files 
src/test - unit testing code
target - destination directory for compiled code  



Maven Key Concepts 
pom.xml - list of dependencies to get
	project meta data - info about project
	dependencies
	plugins - additional custom taks to run 

project coordinates - elements 
group id - name of company, group organization
Artifact id - name for the project 
version  
mvnw and mcnw.cmd allow us to run a Maven proejct, downloads right Maven version


Application Properties
Spring Boot loads properties grom application.properties (empty at beginning, we add for example server.port = 9090)
 
example in properties
coach.name=Mickey Mouse

then in rest controller 

@RestController
public class FunRestController{
	@Value("${coach.name}) <- injects value from propeties into coachName
	private String coachName;
}

Static Content 
/src/main/resources/static -> HTML files, CSS, images etc.



DO NOR USE THE SRC/MAIN/WEBAPP DIR IF APP IS PACKACING, IT ONLY WORKS WITH WAR

Templates 
Spring Boot includes auto-config for following template engines: FreeMaker, Thymleaf, Mustache 

Unit tests are unit tests 


Spring Boot Starters
Collections of Maven dependencies used for certain goal for example spring-boot-starter-web 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
luv2code.com/spring-boot-starters

Spring Booot Starter Parent
special starter that provides Maven defaults 
	<parent>
		Spring Boot version 3.0.0
		....
	</parent>
then all starters inherit version from starter parent 


Spring Boot Dev Tools
spring-boot-devtools - autmatically restarts our apps when code is updated
In Intellij we have to take additional steps - Preferences-> Build, Execution, Deployment -> Compiler
Check Box: Build Project Automatically 
Preferences -> Advanced Settings -> Allow auto-make to ...


Spring Boot Actuator
exposes endpoints to monitor and manage our application
add dependency to POM file
REST endpoints are auto added to our app 
(artifact id - spring-boot-starter-actuator) 
endpoints are prefixed with /actuator
/actuator/health - used to see if our app is up or down 
/actuatroe/info  - provides info about app 
(but its hidden, to expose it managment.endpoints.web.exposure.inlude=healt,info in properties
managment.info.enc.enabled = true)
In default there is no info in this endpoint but we can do 
info.app.name = appname...
info.app.description = desc...
info.app.version = version....
Everything has to be prefixed with info. 
above things give 
{
"app": {
	"name" = desc...
	....
}
}
There are other endpoints: auditevents, beans, mappings lov2code.com/actuator-endpoints
only healt is defaultly exposed, we have to expose other manually
Well secure the endpoints with logins and passwords later 
JSON Formatter browser plugin prints parsed info endpoint and thing like this 




Spring Boot Actuator - secure endpoints
We may not want expose all of information
We have to add spring-boot-starter-security (artifact id) to dependencies
When we wnat to access secured enpoints spring will ask to sign in
Default user name: user
Check console logs for password.
When we want to override default user name and generated password
then in properties
spring.security.user.name=oskar
spring.security.user.password=adminadmin
We can customize Spring Security for Spring Boot Actuator
(use db for roles, encrypted password - later in the course) 
To exclude some endpoints from security
management.endpoints.web.exposure.exclude=health,info
for more details luv2code.com/actuator-docs


Spring Boot apps from command line 
Since we are using Spring Boot the server is embedded in out JAR file
No need to have seoarate server installed/running
Spring Boot apps are self contained -> mycoolapp.jar contains app code and Tomcat server
Two options for running the app
1. use java -jar mycoolapp.jar
2. use spring boot maven plugin 
1. go to project folder -> (./ for mac)mvnw package (creates jar file)/(if we have maven installed mvn package) -> cd target -> ls *.jar (to display all jar files) -> java -jar appname
2. in proejct folder (./)mvnw spring-boot:run




Injecting Custom Application Properties 
We need our apps to be configurable (no hard-coding of values) 
Read app configuration from properties file
We can define any custom properties in application.properties
Your Spring Boot app can access properties using @Value
for example 
coach.name=Mickey Mouse
team.name=The Mouse Club
then we do @Value("${coach.name}") above private String coachName for example 



Spring Boot Server
inside application.properties we can configure server port, context path, actuator, security etc 
List of common properties: luv2code.com/spring-boot-props
Groupped into Core, Web, Security, Data, Actuator, Integration, DevTools, Testing
Core properties
Logging levels - set (info in console) logging levels based on package names for example logging.leve.org.hibernate=TRACE
Loggin Levels: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
Log file name
logging.file=my-crazy-stuff.log luv2code.com/spring-boot-logging
Server port
server.port=7070
Context path of the app
server.servlet.context-path=/my-silly-app 
localhost:7070/my-silly-app/.... deafult path for endpoints
server.servlet.session.timeout=15m
actuator endpoints to include, exclue as aboce, base path for actuator endpoints
secyrity login, password 
data properties - jdbc url, login for db, pasword for db


Inversion of Control
The approach of outsourcing the construction and management od objects 
(app calls (Spring Container ->)Object factory to give it a Coach object and the obj factory gives it to the app based on configuration it may give it CricketCoach, HockeyCoach or BaseballCoach)  
Spring Container primary functions:
-create and manage objects(Inversion of Control)
-Inject object dependencies(Dependency injection)
Configuring Spring Container
might be done by
XML configuration file(legacy)
Java Annotations(modern)
Java Source Code(modern)


Dependency Injection
The dependency inversion principle
The client delegates to another object the responsibility od providing its dependencies
Injection Types
Constructor injection - use when you have required dependencies, generally recommended by spring development team
Setter injection - use when you have optional dependencies, if dependency is not provided, our app can provide deafult logic
Spring AutoWiring
Spring will look for a class that matches by type: class or interface
Spring will inject it automatically hence it is autowired 
@Component annotation marks the class as a Spring Bean, makes bean available for dependency injection
A Spring Bean is just a regular Java class that is managed by Spring
@Autowired over contructor tell Spring to inject a dependency 




Component Scanning 
Spring will scan our Java classes for special annotations, automatically registers the beans in the Spring container 
@SpringBootApplication is composed od the following annotations:
@EnableAutoConfiguration enables spring boots auto-config support
@ComponentScan enables component scanning od current package, recursively scans sub-packages
@Configuration able to register extra beans with @Bean or import other configuration classes 
Default scanning is fine if everything is under the package that main application class is 
eg com.oskar.springcoredemo
If we have com.oskar.utils we can pass it in anotation (as in project 02 of 02 section)  


Setter Injection 
inject dependencies by calling setter method(s) on our class 
We can use it with any method, just give @Autowired annotation 


Field Injection
Not recommended by spring development team
It makes code  harder to unit test 
Inject dependencies by setting field values on your class directly (even private fields) 
Simply add @Autowired over the field you want to inject to 
@Autowired
private String myCoach 



Qualifiers 
(If we have more Coach interface implementators, Spring wont be able to decide which implementator to use
thats where @Qaulifier comes in)
Code example in section 02 project 04
For Setter and Constructor its similar



Primary anotation
alternate solution to qualifiers
it passes the responisibility to the classes not setter/constructor
then we dont have to use the @Qualifier
There must be only one @Primary
If we mix @Primary and @Qualifier, the @Qualifier has higher priority 
@Qualifier is more recommended 
If we add multiple @Primary we get exception 



Lazy Initialization
(By default, when our app starts, all beans are initialized 
Spring will create an instance od each and make them available)
Instead of creating all beans up frony, we can specify lazy initialization
A bean will be only initialized if:
It is needed for dependency injection
Or it is explicitly requested
We just have to add @Lazy annotation to a given class 
We can also set that in configuration file - spring.main.lazy-initialization=true
Advantages:
-only creates objects as needed
-may help with faster startup if you have large number of components
Disadvanatges 
-If you have web related components like @RestControler, not created until requested  
-may not discober cinfuguration issues untill too late
-need to make sure you have enough memory for all beans once created 
 


Bean Scopes
Scope refers to lifecycle of a bean (how long does the bean live, how many instances are created, how is the bean shared)
Default Scope is singleton - Spring Container created only one instance of a bean, it is cached in mem, all dependency injections for that bean will reference the same bean
We can explicitly specify bean scope by adding above class
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
other scopes - 
prototype, creates a new bean instance for each container request
request, scoped to an http web request, only used for web apps 
session, scoped to http web session -||-
global-session, scoped to a global http web session -||-
WARNING 
For "prototype" scoped beans, Spring does not call the destroy method
In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, and otherwise assembles a prototype object, and hands it to the client, with no further record of that prototype instance.
Prototype beans are lazy by default


Bean Lifecycle Methods/Hooks
We can add custom code during bean initialization @PostContruct
-Calling custom bussines logic methods
-Setting up handles to resources (db,sockets,file etc)
We can add custom code during bean destruction
-Calling custom bussines logic methods @PreDestroy
-Cleaning up handles to resources (db,sockets,file etc)



Configuring Beans with Java Code
First we make a class with @Configuration annotation
Then inside this class we make method with @Bean annotation which returns that bean and has a name of that bean (which we would use in the @Qualifier) 
eg public Coach swimCoach(){
   	return new SwimCoach();
   }
Use case for @Bean we may not have access to the source code of third party class so we cant add @Component 





Hibernate / JPA overview 
framework for persisting/saving objects in database
Hibernate handles all of low-level sql
Minimizes the amount of JDBC code we have to develop 
Provides the Object to Relational Mapping
JPA is Jakarta Persistence API, Standard API for Obj-to-Relational Mapping ORM
Only a specifiaction, defines a set of interfaces, requires an impelmentation to be usable 
Hibernate is an Implementation od JPA and EclipseLink is another implementation 
Benefits of using JPA 
-By using a standard API, we are not locked to vendor's implementation
-Maintan portable, flexible code by coding to JPA spec
-Can theoreticalyy switch vendor implementations  
(Saving object with JPA, e.g we have an object student , we do entityManager.persist(student), entityManager is JPA helper object)
(Retrive object student = entityManager.find(Student.class, id))

How does JPA/Hibernate to JDBC
JPA uses JDBC for all database communications

Setting Up Spring Boot project with Hibernate JPA
EntityManager is main component dor creating queries etc, it is from JPA
Based on configs, Spring Boot will automatically create the beans:
DataSource, EntityManager, ... 
We can then inject these into out app 
In spring initializr we have to add JDBC, and Spring Data JPA
Spring Boot will automatically configure our data source
DB connecstion info will be taken from application.properties
(
spring.datasource.url=jdbc:mysql://localhost3306/student_tracker
spring.datasource.username=springstudent
spring.datasource.password=springstudent
)
No need to give JDBC driver class name, Spring Boot will auto detect it based on url 
 

JPA Annotations
1.Annotate Java Class
2.Develop Java Code to perform database operations
Entity Class - Java class taht is mapped to database table 
must be annotated with @Entity 
Must have a public or protected no-argument constructor (the class can have other constructors)
Map class to table
@Entity
@GeneratedValue(strategy=GenerationType.IDENTITY) - we are saying that this value will be generated by database, There are other generation startegies  
@Table(name="student") 
Map fields to columns 
@Id
@Column(name="id")
or
@Column(name="first_name") - optional, if not specified, the column name is the same as java field
Primary key - Uniquely identifies each row in a table, cannot contain NULL values 
You can define your own generation startegy
Create implementation of org.hibernate.id.IdentifierGenerator
Override the method: public Serializable generate(...)

Saving a Java Object with JPA
We ll make Data Access Object (Student Access Object) DAO helper class to communicate 
should have methods
save()
findById()
findAll()
update()
delete()
deleteAll()
DAO needs a JPA Entity Manager - the main component for saving / retrieving entities  
Entity Manager need Data Source - defines database connection info
Entity manager and Data Source is auto created by Spring Boot
based on the app properties file
We can autowire/inject Entity Manager into our DAO 
Student DAO <-> Entity Manager <-> Data Source <-> DB
@Transactional annotation - auto begin and end a transaction of out JPA code, we add this above the method 
Sprig provides the @Repository annotation 
-sub annotation of @Component 
it is for annotating DAOs, we put it over DAO class, translates JDBC exceptions  
 
Primary keys
Change auto increment start value
alter table student_tracker.student auto_increment=3000
Reset table (removes all rows, resets auto increment)
truncate student_tracker.student


Retrieving a Java Object with JPA  
                                     class       pk
Student myStudent = entityManager(Student.class, 1); if not found returns null


Querying Objects with JPA
JPA Query Language - query lang for retrieving objects
Similar in concept to SQL
JPQL is based on entity name and entity fields
TypedQuery<Class> querry = entityManager.createQuery(query ("FROM Student- entity name and entity fields), class);
List<Class> list = query.getResultList(); -> that does the query
query looks like "FROM Student WHERE lastName = 'Kola' OR firstName = 'Oskar'"
in queries we use Named Parameters prefixed with colon
"FROM Student WHERE lastName = :someLastName OR firstName = 'Oskar'"
 query.setParameter("someLastName" , argPassedToMethod)






Updating an Object with JPA
one object 
Student theStudent - enititymanager.find(Student.class, 1);
theStudent.setFirstName("Scooby"); 
entitymanager.merge(theStudent); 
or multiple objects
int numRowsUpdated - entityManager.createQuery("UPDATE STUDENT SET lastName='Tester'").executeUpdate();



Deleting objects with JPA
one object
int id = 1;
Student student = enitityManager.find(Student.class, id);
entityManager.remove(student);
multiple object
int numRowsDeleted = entityManager.createQuery("DELETE FROM Student WHERE lastName="Szysiak").executeUpdate();



Create database tables with JPA
spring.jpa.hibernate.dll-auto=(PROPERTY-VALUE)create!!!!!!!!!!!!!becareful - when you run your app JPA wukk drop tables then create them based on annoations in java code
we have other proprty values such as drop, create only, non...
If we want to create tables once and keeep data we should choose update property value 




What Are REST Services
(e.g We want to get weather in some city from external weather service, we send request with a city name, and the service gives us the weather report) 
How we connect?
We can make a REST API calls over HTTP
REST - REpresentational State Transfer 
REST is language independent, the clienct app can use and language and the server app can also use any language
REST app can use any data format
Commonly used XML and JSON(most popular) - JavaScript Object Notation
(e.g for openweathermap.org 
the api documentation gives us following
api.openweathermap.org/data/2.5/weather?q={city name}
or
api.openweathermap.org/data/2.5/weather?q={city name},{country code}
The weather service responds with JSON
{
...
"temp": 14,
...
"name": "London",
...
}
)
(
e.g
CRM app -> CRM Service (spring-rest) server
app calls service get customers
server returns customer list
We will create CRM Service App
)
We can call it REST(ful) API, webservices, services



JSON Basics
JavaScript Object Notation
Lightweight data format for storing and exchanging data
Language independent
{	<- curely braces define objects in JSON
	"id": 14,
	"firstName": "Mario",
	"lastName": "Rossi",
	"active": true,
	"address": {
			"street": "Aleje 7",	<- nested object
			"city": "Warszawa"
			},
	"languages": ["Java", "C#", "Python"] <-array
			
}
Name always in double qutoes
JSON values
numbers - no quotes
string - double quotes
boolean - true, false
nested json object
array
null




REST HTTP Basics
{
Mose common use of REST is over HTTP
Leverage HTTP methods for CRUD operations
HTTP method			Crud operation
POST				Create a new entity
GET				Read a list of single entity
PUT				Update an existing entity
DELETE 			Delete an exisitng entity

CRM App  witll send HTTP Request message and CRM REST Service will send HTTP response message 

HTTP Request message will have 3 parts
Rquest line: the HTTP command
Header variables: request metadata
Message body: contents message

HTTP Response message will have 3 parts
Response line: server protocol and status code
Header variables: respinse metadata (content type, info about the data, format, size)
Message body: contents of message

Status code:
100-199 Informational
200-299 Successful
300-399 Redirection
400-499 Client error
500-599 Server error

MIME content types 
Multipurpose Internet Mail-Extension
The message format is described by MIME content type
Basic syntax: type/sub-type
text/html, text/plain
application/json, application/xml

Client tool 
send HTTP requests to the REST Web Service/API
plenty tool available curl, postman
we'll use postman www.getpostman.com
app for inspecting requests
}


Spring Boot REST Controller 
REST Client -> /test/hello -> REST Service 	<- we will be writing this code 
REST Client <- "Hello World!" <- REST Service



Java JSON Data Binding 
Data Binding is the process of converting JSON data to Java POJO 
Json Data-> data binding -> Java POJO also known as mapping serialziation marshalling 
Json Data<- data binding <- Java POJO
Spring uses the Jackson Project behind the scenes
Jackson handles data binding between JSON and JAVA POJO
Spring auto includes dependecy for Jackson 
Jackson will call appropriate getter/setter method 
JSON -> POJO Jackson call setter methods to create an object
POJO -> JSON Jackson call getter method to create JSON 
JSON data being passed to rest controller is converted to POJO
Java object being returned from rest controller is converted to JSON
all happends automatically 
 


Spring Boot REST POJO 
we will be creating a service to return list of students through /api/students
Our REST service will return List<Student>
need to convert that list to JSON -> Jackson will do it automatically 






Path Variables
If we want to retrieve a single student by id
GET /api/students/{studentId} <-path variable
/api/students/1 
/api/students/0 
way of parametrizing an endpoint
@GetMapping("/student/{studentId}")
public Student getStudent(@PathVariable int studentId) <- name must match





Spring Boot REST Exception Handling
We can throw an exception pojo for example
StudentErrorResponse with fields status, message, timeStamp 
Jackson will convert it and give a JSON file
1. We create an exception class StudentNotFoundException
2. If we cant find a student we throw this exception
3. Then we do @ExceptionHandler
4. The exceptioon handler should return ResponseEntity<StudentErrorResponse> 
@ExceptionHandler
public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc)... 




Spring Boot REST global exception handler BEST PRACTICE
(Exception handler code is only for the specific REST controller, cant be reused by other controllers, we need global exceptions handlers - promotes reuse, centralizes exzception handling)
@ControllerAdvice annoatation might help
it is simialt to interceptor/filter 
pre - process requests to controlers 
post - process response to handle exceptions
perfect fot global exception handling 
example of Aspect Oriented Programming 




REST API Design
1. Review API requirements
2. Identify main resource/entity (in api use plural form eg employess)
3. Use HTTP methods to assign action on resource
		|
HTTP Method			CRUD Action					Endpoint
POST				Create new entity				/api/employees
GET				Read a list of entities or single entity	/api/employees or /api/employees/{employeeId} 
PUT 				Update an existing entity			/api/employees
DELETE				Delete an existing entity			/api/employees/{employeeId}
Examples later on in the course 

DON'T INCLUDE ACTION IN THE ENDPOINT - /api/updateEmployee etc 



Spring Boot Service Layer
Purpose
-service facade design pattern
-intermediate layer for custom business logic
-integrate data from multiple sources 
Employee REST Controller <--> EMPLOYEE SERIVE <--> Employee DAO <--> database 
Integrate Multiple Data Sources
Employee REST Controller <--> EMPLOYEE SERIVE <--> Employee DAO <--> database 
					      <--> Skills DAO   <--> Another database
					      <--> Payroll DAO   <--> Another database
@Service annotation
-sub annotation of @Component
applied to Service implementations
Spring will auto register the Service impl
thatnks to component-scanning




Service Layer Best Practice
Best practice is to apply transactional boundaries at the service layer
It is the service layer's responisbility to manage transaction boundaries
For implementation code
	-apply @Transactional on service methods
	-remove @Transactional on DAO methods if they already exist 




Spring Data JPA 
spring.io/projects/spring-data-jpa
solution which gives us a CRUD implementations given etity type and primary key
Spring Data JPA prvides the interface: JpaRepository
it exposes methods (some by inheritance from parents)
suchas as  findaAll(), findById(), save, deleteById and others 
we just have to plug in Entity type and primary key type 
1. Extend JpaRepository interface
2. Use your repository in your app
(No need for implementation) 
public interface EmployeeRepository extends JpaRepository<Employee(entity type), Integer(primary key>
Advanced features available for:
extending and adding custom queries
query domain specific language
defining custom methods (low-level coding)




Spring Data REST
spring.io/projects/spring-data-rest
solution which given JpaRepository will give you REST CRUD implementation
How does it work in background?
Spring Data REST will scan our project for JpaRepository
Expose RESt APIs for each entity type for our JpaRepository
By default, Spring Data REST will create endpoints based on entity type
In a simple pluralized form (first char of entity type i lowercase, then adds an s to that)
We have to add Spring Data REST in our POM file
(we need to have 3 things - entity, JpaRepository extending interface, Maven POM file dependency: spring-boot-starter-data-rest)
Now our system architecture will lok like:
Spring Data REST /employees <--> Employee Repository <--> database
(HATEOAS
Spring Data REST endpoints are HATEOAS compliant 
Hypermedia as the Engine of Application State
Hypermedia-driben sites provide information to access RESt interfaces
Think of it as meta-data for RESt data
example:
{	
	"id": 14,
	"firstName": "Mario",	<-employee data
	"lastName": "Rossi",
	"_links": {
		"self": {
			"href": "localhost:8080/employees/3"
			},						<-response meta-data links to data 
		"employee: {
			"href": "localhost:8080/employees/3"
			}
		}
	or
	"page": {
		"size": 20,
		"totalElements": 5,
		"totalPages": 1
	}
}

} 
HATEOAS uses HyperText Application Languiage data format 
Advanced features of Spring Data REST
-pagination, sorting, searching
-extending and adding custom queries with JPQL
-Query Domain Specisfic Language
We can change base path in properties 
Theres is a difference in PUT http request
we pass data, but id is passed in the url /magic-api/employees/4




Spring Data REST Configs and Sorting
We can specify plural name of entity by an anotation - @RepositoryRestSoruce(path="members") over the JpaRepository extending interface
By default Spring Data REST will return first 20 elements
(PageSize = 20), we can navigate to the different pages of data using query param
localhost:8080/employees?page=0
other properties: luv2code.com/spring-boot-props , search for spring.data.rest.*
We can sort by the property names of entity
Sort by first name, descending: localhost:8080/employees?sort=firstName,desc
localhost:8080/employees?sort=firstName,lastName,asc



Spring Boot REST API security
What does it do?
Secure Spring Boot REST APIs
Define users and roles
Protect URLs based on role
Store users, asswords and roles in DB
Spring Security Manual luv2code.com/spring-security-reference-manual
Spring Security Model
-Spring Security defines a framework for security 
-Implemented using Servlet filters in the background 
	- servlet filters are used to pre-process/post-process web requests
	- servlet filters can route web requests based on security logic
	- spring provides a bulk of secuirty functionality with servlet filters 
-Two methods of securing an app: declarative and programmatic 

Web Browser <--> Spring Security Filters <--> Protected Web Resource
			|
			------------> app security configuration <-> users passwords roles

Security Concepts
-Authentication - check user id and password with credentials stored in db/app
-Authorization	- check to see if user has an authorized role

Declarative Security
-define apps security constraints in configuration - handled by all Java config @Configuration
-provides separation of concerns between application code and security 

Programmatic Security
-Spring Security provides an API for custom application coding
-Provides greater customization for specific app requirements 

Enabling Spring Security
1. add spring-boot-starter-security to pomc.xml
2. this will auto secure all endpoints for our app
3. now when we acces app spring will prompt for login and password 

Authentication and Authorization
In-memory
JDBC
LDAP
Custom/Pluggable





Spring Boot Security - Basic Configuration
We have 
user id 	password 	roles
john		test123		employee
mary		test123		employee/manager/admin
Development process
1. Create Spring Security Configuration class @Configuration
2. Add users passwords,roles
Spring Security Password Storage
{id}encodedPassword

id	description
noop	plain text passwords
bcrypt	BCrypt password hashing
...
e.g {noop}test123
If we define our users in @Configuration class Spring Boot will not use the user from the properties file





Restrict access based on roles
Our example
read all - employee
read single - employee
create - manager
update - manager
delete - admin
Restricitng access to roles
requestMatchers(httpMethod (e.g HttpMethod.POST) ,path)	(** - all sub-paths)
	.hasRole(role);
Spring security can protect against CSRF attacks
Embeed additional auth data/token into all HTML forms
On subsequent request, web app will verify token before processing
Spring Security team recommends to use CSRF protection for any normal browser web requests, traditional web apps with html forms to add/ modify data
If we are building a REST API for non-browser clients we may want to disable CSRF protection
In general not required for stateless REST APIs that use POST,PUT,DELETE and/or PATCH 



Spring Boot REST API Security - JDBC Authentication
(We put logins, passwords and roles in a database) 
Spring Security can read user account info from db
By default we have to follow Spring Security's predefined table schemas 
(We can also customize table chemas - we will be rsponisble for developing the code to acces the data (using JDBC, JPA))
Development process
1. Develop SQL script to set up database tables
2. Add db supoort to POM.xml
3. Create JDBC properties file 
4. Update Spring Security Configuration to use JDBC 
Spring Security Database Schema
users 0:n authorities(roles)
username  username (fk)
password  authority
enabled 




Spring Boot REST API Security - BCrypt password encryption
Spring security recommends bcrypt algorithm
which perform one-way encrypted hashing
add a random salt to the password for additional protection
includes support to defeat brute force attacks 
How to get a Bcrypt password
Use a website utility to perform the encryption
Write Java code to perform the encryption
Length of encoded password field bcrypt + {bcrypt} is 68
Password from the db is never decrypted (input password is encrypted and compared to the one from db(b crypt is one way encryption algorithm)





Spring Boot REST API Security - Custom Tables and Using Hibernate to use roles
To use cutom tables we have to tell spring how to find user by user name
and provide query to find authorities/roles by user name
Using Hibernate to use roles
https://www.luv2code.com/downloads/udemy-spring-boot-3/bonus-spring-boot-rest-security-jpa-hibernate-bcrypt/bonus-lecture-spring-boot-rest-security-jpa-hibernate-bcrypt.pdf  






Spring MVC with Thymleaf 
Thymleaf is a Java templating engine
Commonly used to generate the HTML views for web apps
However it is a general purpose templating engine
can use it outside of web apps 
It is a separate project unrelated to spring.io but there is a lot of synegy between those two
What is Thymleaf template
Can be an HTML page with some Thymlea expressions
Include dynamic content from Thyleaf expressions
Can acces Java code, objects, spring beans 
Where is the Thymlead template processed
In a web app Thymleaf is processed on the server 
Results included in HTML return to browser 
Place Thymleaf templates in src/main/resources/templates



Spring MVC with Thymeleaf and CSS
We can use 
Local CSS files 
-create CSS file in resources/static/css/demo.css
-apply css in html file
- we can install bootstrap css files 
Remote CSS files
-we give an href to css placed in the web




Thymeleaf expressions
form - kind of object which asks for data and stores input info{
th:action - location to send form data
th:object - reference to model attribute
th:field  - bind input filed to a property on model attribute 
luv2code.com/thymleaf-create-form
}
when form is loaded will call employee.get... to fill the fields (in our case it is empty)
when is submitted calls employee.set....
Post/Redirect/Get - pattern when we redirect to the list of employedd luv2code.com/post-redirect-get



Advanced mappings
In the database we most likely will have
multipletables
realtionships between tables
	-one-to-one e.g instructor can have an instructor detail identity 
	-one-to-many, many-to-one instrcutor can have many courses
	-many-to-many, course can have many students, students can have many courses
primary key - identidy a unique row in table
foreign key - a field in one table that refers to primary key in another table
Cascade - apply the same opeartions to related enities - cascade instructor saving to instructor detail, if we delete instructor delete also his instructor detail
Fetch types: Eager vs lazy Loading
if we fetch/retrieve data, whould we retrieve everything
-eager will retrieve eveything
-lazy will retrieve on request
Uni-directional and Bi-directional loading




@OneToOne mapping
in a class which has a foreign key we make

Uni-directional
@OneToOne
@JoinColumn(name="column which stores foreign key")
private NameOfClassForeignKeyRefersTo somename;

Entity Lifecycle
Operation 		Description
Detach			If entity is detached it is not associated with a Hibernate session
Merge			If instance is detached from session, then merge will reattach to session
Persist 		Transisitons new instances to managed state. Next flush/commit will save in db
Remove  		Transitions managed entity to be removed. Next flush/commit will delete from db
Refresh			Reload/synch object with data from db. Prevents stale data 

Cascade types
Persist - If entity is persisted/saved, related entityy will also be persisted
Remove - If entity is removed, related entityy will also be removed
Refresh -If entity is refreshed, related entityy will also be refreshed
Detach -If entity is detached (not associated with session), related entityy will also be detached
Merge - If entity is merged, related entityy will also be merged
All - All of above types 

@OneToOne(cascade=CascadeType.ALL) - by defgault no operations are cascade, we can do comma delimeted list like {CascadeType.PERSIST, CascadeType.REMOVE)
@JoinColumn(name="column which stores foreign key")
private NameOfClassForeignKeyRefersTo somename;







@OneToOne Bi-directional
	-------->
Instuctor	Instructor Detail
	<-------
We can have Instructor instance which has Instructor Detail field inside, but it also works the other way
We add a field Instructor instructor
above we add
@OneToOne(mappedBy="instructionDetail", cascade=CasacadeType.ALL) <--- refers to instructorDetail property in instrcutor class 






@OneToMany Bi-directional
e.g
	  <----------->Course 1
Instructor<----------->Course 2
	  <----------->Course 3
  -------------Many refers to a class which is related to one objest
@ManyToOne
@JoinColumn(name="foreign key colum")

   ----------One refers to a class which is related to many objects
@OneToMany(mappedBy="field name in the other (many) class"
private List<Many Class> ....;






@OneToMany Fetch Types
Eager will retreive eveything(loads all dependent entities)
Lazy will retrieve on request (loads the mian entity first, dependent enitites are loaded on demand)
When we define the mapping realtionship we can specify fetchtype
@OneToMany(fetch=FetchType.LAZY, mappedBy="instructor")
Default Fetch Types
@OneToOne eager
@OneToMany lazy
@ManyToOne eager
@ManyToMany lazy
(We can retreive data on demand only when Hiobernate session is not close, if we do it and its closed hibernate will throw exception)



Lazy loading
fetch=FetchType.Lazy
We have to create dao method to get lazy loaded entities (e.g courses of instructor)
and if somebody wants to get our enitites we call the query and set list of main entity



@ManyToMany
Join table is a table that provides mapping between two tables, it has foreign keys for each table to define the mapping realtionship
@ManyToMany
@JoinTable( <-specify which join table we will be using
	name="course_student,
	joinColumns=@JoinColumn(name="course_id"),
	inveraeJoinColumns=@JoinColumn(name="student_id" -> inverse refers to the other side of the class if we are in the Course class then the inverse is Student
)
private List<Student> course;









Aspect Oriented Programming
Programming technique based on concept of an Aspect
Aspect encapsulates cross-cutting logic (used everywhere - might be reused)

AOP use cases
logging, security,
audit logging - who, what, where
exception handling
analytics - what are peak times etc.

Aspect: module of code for a cross-cutting concern (used in many places) 
Advice: what action is taken and when it should be aplied 
Join point: When to apply code during program execution
Pointcut: A predicate expression for where advice should be applied 

Advice types
Before advice: run before the method
After finally advice: run after the method (finally)
After returning advice: run after the method (success execution)
After throwing advice: run after method (if exception thrown)

Weaving: connecting aspects to target objects to create an advised method

Two main frameworks for AOP:

-Spring AOP
Simpler than AspectJ
Uses PROXY pattern
Can migrate to AspectJ when using @Aspect annotation
Used in security, transactions, caching
Uses run-time weaving of aspects

-AspectJ
Works with any Pojo not just beans from app context
Faster perofrmacje compared to Spring AOP
provides compete support for AOP
Rich support for
join points: method-level, constructor, field
code weaving: compile time, post compile-time and load-time

Before advice
runs before method call
@Before annotationa above method




Pointcut Expression language
execution(modifiers-pattern? return-type-pattern declaring-type-pattern?
method-name-pattern(param-pattern throws-pattern?) ? - optional
@Before("execution(public void com.oskar.aopdemo.dao.AccountDao.addAccount())") <- we might not specify class
@Before("execution(public void add*())") <- any method that starts with add 
* <- means any return type, any parameters etc...

Parameter patterns
() - matches a method with no arguments
(*) - matches a method with one argument of any type
(..) - matches a method with 0 or more arguments of any type 
@Before("execution(* addAccount(com.oskar.Account))")




Combining pointcut expressions
we can use &&, !, ||
like @Before("expressionOne() && ! expressionTwo()")




@After advice is like finally block
executes regardless of exception is thrown or method is successful


