Spring Boot Overview
framework for building java applications
Spring Boot perfomrs auto-configuration on props files and JAR classpath
Help to resolve dependecy conflicts
Provides embedded HTTP server

Spring Boot and Spring relation
Spring Boot uses Spring behiond the scenes, makes it easier to use Spring


Spring Initilizer http://start.spring.io
Qucikly create a starter Spring Boot Project
Select your dependencies
Creates a Maven/Gradle project
Import project into my IDE

No neeed to install server separetly

Running Spring Boot Apps
Spring Boot apps can be run standalone
Run from IDE or command-line


Deploying Spring Boot Apps
Spring Boot apps can also be deplotes in traditional way (Deploy WAR file to external server) 


Maven 
downloads jar files, don't need to do it manually


Develeopment od Spring file in spring initializr
1. Configure our project at Spring Initializr website 
-choose project, language, spring boot version, project metadata and dependencies
2. Download zip
3. Unzip file
4. Import project into IDE
Then we cun run it and it runs on local server localhost:8080

spring.io - main spring website 

Goals of Spring 
lightweight debelopment with POJOs
dependency injection
minimize amount of code 




Core Container
Beans, Core, SpEL, Context - factory for creating beans 
Beans, dependency injection, inversion control: https://www.baeldung.com/spring-bean

Infrastracture 
AOP: Aspect oriented programming 
Add functionality to objects declaratively - logginm security transactions 

Data Acces Layer 
Communicating with databases, it contains JDBC for example , ORM - object relational Mapping Intergration with Hibernate and JPA
JMS Java message service, Transactions support 

Web Layer
All web related classes  

Test Layer (Unit, Integration, Mock) 
Supports test driven development 





What are Spring Projects? 
additionals modules built on top of the core framework for example: Spring Cloud, Spring Security 



What is Maven? 
project managment tool
we can tell which dependencies we need and it auto downloads it for us 

Maven project structure 
src/main/java - place for source code
src/main/resources - properties/config files used by your app 
src/main/webapp - JSP files and web config files 
src/test - unit testing code
target - destination directory for compiled code  



Maven Key Concepts 
pom.xml - list of dependencies to get
	project meta data - info about project
	dependencies
	plugins - additional custom taks to run 

project coordinates - elements 
group id - name of company, group organization
Artifact id - name for the project 
version  
mvnw and mcnw.cmd allow us to run a Maven proejct, downloads right Maven version


Application Properties
Spring Boot loads properties grom application.properties (empty at beginning, we add for example server.port = 9090)
 
example in properties
coach.name=Mickey Mouse

then in rest controller 

@RestController
public class FunRestController{
	@Value("${coach.name}) <- injects value from propeties into coachName
	private String coachName;
}

Static Content 
/src/main/resources/static -> HTML files, CSS, images etc.



DO NOR USE THE SRC/MAIN/WEBAPP DIR IF APP IS PACKACING, IT ONLY WORKS WITH WAR

Templates 
Spring Boot includes auto-config for following template engines: FreeMaker, Thymleaf, Mustache 

Unit tests are unit tests 


Spring Boot Starters
Collections of Maven dependencies used for certain goal for example spring-boot-starter-web 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
luv2code.com/spring-boot-starters

Spring Booot Starter Parent
special starter that provides Maven defaults 
	<parent>
		Spring Boot version 3.0.0
		....
	</parent>
then all starters inherit version from starter parent 


Spring Boot Dev Tools
spring-boot-devtools - autmatically restarts our apps when code is updated
In Intellij we have to take additional steps - Preferences-> Build, Execution, Deployment -> Compiler
Check Box: Build Project Automatically 
Preferences -> Advanced Settings -> Allow auto-make to ...


Spring Boot Actuator
exposes endpoints to monitor and manage our application
add dependency to POM file
REST endpoints are auto added to our app 
(artifact id - spring-boot-starter-actuator) 
endpoints are prefixed with /actuator
/actuator/health - used to see if our app is up or down 
/actuatroe/info  - provides info about app 
(but its hidden, to expose it managment.endpoints.web.exposure.inlude=healt,info in properties
managment.info.enc.enabled = true)
In default there is no info in this endpoint but we can do 
info.app.name = appname...
info.app.description = desc...
info.app.version = version....
Everything has to be prefixed with info. 
above things give 
{
"app": {
	"name" = desc...
	....
}
}
There are other endpoints: auditevents, beans, mappings lov2code.com/actuator-endpoints
only healt is defaultly exposed, we have to expose other manually
Well secure the endpoints with logins and passwords later 
JSON Formatter browser plugin prints parsed info endpoint and thing like this 




Spring Boot Actuator - secure endpoints
We may not want expose all of information
We have to add spring-boot-starter-security (artifact id) to dependencies
When we wnat to access secured enpoints spring will ask to sign in
Default user name: user
Check console logs for password.
When we want to override default user name and generated password
then in properties
spring.security.user.name=oskar
spring.security.user.password=adminadmin
We can customize Spring Security for Spring Boot Actuator
(use db for roles, encrypted password - later in the course) 
To exclude some endpoints from security
management.endpoints.web.exposure.exclude=health,info
for more details luv2code.com/actuator-docs


Spring Boot apps from command line 
Since we are using Spring Boot the server is embedded in out JAR file
No need to have seoarate server installed/running
Spring Boot apps are self contained -> mycoolapp.jar contains app code and Tomcat server
Two options for running the app
1. use java -jar mycoolapp.jar
2. use spring boot maven plugin 
1. go to project folder -> (./ for mac)mvnw package (creates jar file)/(if we have maven installed mvn package) -> cd target -> ls *.jar (to display all jar files) -> java -jar appname
2. in proejct folder (./)mvnw spring-boot:run




Injecting Custom Application Properties 
We need our apps to be configurable (no hard-coding of values) 
Read app configuration from properties file
We can define any custom properties in application.properties
Your Spring Boot app can access properties using @Value
for example 
coach.name=Mickey Mouse
team.name=The Mouse Club
then we do @Value("${coach.name}") above private String coachName for example 



Spring Boot Server
inside application.properties we can configure server port, context path, actuator, security etc 
List of common properties: luv2code.com/spring-boot-props
Groupped into Core, Web, Security, Data, Actuator, Integration, DevTools, Testing
Core properties
Logging levels - set (info in console) logging levels based on package names for example logging.leve.org.hibernate=TRACE
Loggin Levels: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
Log file name
logging.file=my-crazy-stuff.log luv2code.com/spring-boot-logging
Server port
server.port=7070
Context path of the app
server.servlet.context-path=/my-silly-app 
localhost:7070/my-silly-app/.... deafult path for endpoints
server.servlet.session.timeout=15m
actuator endpoints to include, exclue as aboce, base path for actuator endpoints
secyrity login, password 
data properties - jdbc url, login for db, pasword for db


Inversion of Control
The approach of outsourcing the construction and management od objects 
(app calls (Spring Container ->)Object factory to give it a Coach object and the obj factory gives it to the app based on configuration it may give it CricketCoach, HockeyCoach or BaseballCoach)  
Spring Container primary functions:
-create and manage objects(Inversion of Control)
-Inject object dependencies(Dependency injection)
Configuring Spring Container
might be done by
XML configuration file(legacy)
Java Annotations(modern)
Java Source Code(modern)


Dependency Injection
The dependency inversion principle
The client delegates to another object the responsibility od providing its dependencies
Injection Types
Constructor injection - use when you have required dependencies, generally recommended by spring development team
Setter injection - use when you have optional dependencies, if dependency is not provided, our app can provide deafult logic
Spring AutoWiring
Spring will look for a class that matches by type: class or interface
Spring will inject it automatically hence it is autowired 
@Component annotation marks the class as a Spring Bean, makes bean available for dependency injection
A Spring Bean is just a regular Java class that is managed by Spring
@Autowired over contructor tell Spring to inject a dependency 




Component Scanning 
Spring will scan our Java classes for special annotations, automatically registers the beans in the Spring container 
@SpringBootApplication is composed od the following annotations:
@EnableAutoConfiguration enables spring boots auto-config support
@ComponentScan enables component scanning od current package, recursively scans sub-packages
@Configuration able to register extra beans with @Bean or import other configuration classes 
Default scanning is fine if everything is under the package that main application class is 
eg com.oskar.springcoredemo
If we have com.oskar.utils we can pass it in anotation (as in project 02 of 02 section)  