Spring Boot Overview
framework for building java applications
Spring Boot perfomrs auto-configuration on props files and JAR classpath
Help to resolve dependecy conflicts
Provides embedded HTTP server

Spring Boot and Spring relation
Spring Boot uses Spring behiond the scenes, makes it easier to use Spring


Spring Initilizer http://start.spring.io
Qucikly create a starter Spring Boot Project
Select your dependencies
Creates a Maven/Gradle project
Import project into my IDE

No neeed to install server separetly

Running Spring Boot Apps
Spring Boot apps can be run standalone
Run from IDE or command-line


Deploying Spring Boot Apps
Spring Boot apps can also be deplotes in traditional way (Deploy WAR file to external server) 


Maven 
downloads jar files, don't need to do it manually


Develeopment od Spring file in spring initializr
1. Configure our project at Spring Initializr website 
-choose project, language, spring boot version, project metadata and dependencies
2. Download zip
3. Unzip file
4. Import project into IDE
Then we cun run it and it runs on local server localhost:8080

spring.io - main spring website 

Goals of Spring 
lightweight debelopment with POJOs
dependency injection
minimize amount of code 




Core Container
Beans, Core, SpEL, Context - factory for creating beans 
Beans, dependency injection, inversion control: https://www.baeldung.com/spring-bean

Infrastracture 
AOP: Aspect oriented programming 
Add functionality to objects declaratively - logginm security transactions 

Data Acces Layer 
Communicating with databases, it contains JDBC for example , ORM - object relational Mapping Intergration with Hibernate and JPA
JMS Java message service, Transactions support 

Web Layer
All web related classes  

Test Layer (Unit, Integration, Mock) 
Supports test driven development 





What are Spring Projects? 
additionals modules built on top of the core framework for example: Spring Cloud, Spring Security 



What is Maven? 
project managment tool
we can tell which dependencies we need and it auto downloads it for us 

Maven project structure 
src/main/java - place for source code
src/main/resources - properties/config files used by your app 
src/main/webapp - JSP files and web config files 
src/test - unit testing code
target - destination directory for compiled code  

Maven Key Concepts 
pom.xml - list of dependencies to get
	project meta data - info about project
	dependencies
	plugins - additional custom taks to run 

project coordinates - elements 
group id - name of company, group organization
Artifact id - name for the project 
version 
